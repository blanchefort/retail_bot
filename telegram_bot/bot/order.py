from telegram import ParseMode
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import CallbackQueryHandler
from telegram.ext import Filters

from django.contrib.auth.models import User

from webpanel.models.order import Order as OrderModel
from webpanel.models.profile import Profile

from telegram_bot.decorator import save_query
from .menu import menu_kb

class Order(object):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    """
    def __init__(self, updater: Updater) -> None:
        self.updater = updater
        dp = updater.dispatcher

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        dp.add_handler(CommandHandler('order', self._order))
        dp.add_handler(MessageHandler(
            Filters.regex(r'^üõí –ö–æ—Ä–∑–∏–Ω–∞$'),
            self._order))

        dp.add_handler(MessageHandler(
            Filters.regex(r'^–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ$'),
            self._execute_order))
        dp.add_handler(MessageHandler(
            Filters.regex(r'^‚úâ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$'),
            self._execute_order))

        dp.add_handler(MessageHandler(
            Filters.regex(r'^–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é$'),
            self._delete_order))
        dp.add_handler(MessageHandler(
            Filters.regex(r'^üóë –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É$'),
            self._delete_order))

        dp.add_handler(MessageHandler(
            Filters.regex(r'^–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏$'),
            self._order_list))
        dp.add_handler(MessageHandler(
            Filters.regex(r'^üìÑ –ó–∞—è–≤–∫–∏ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏$'),
            self._order_list))

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –ø–æ–∑–∏—Ü–∏–∏
        dp.add_handler(CallbackQueryHandler(
            callback=self._change_product_1,
            pattern=r'^chpk_1_[0-9]*$'))
        dp.add_handler(CallbackQueryHandler(
            callback=self._change_product_2,
            pattern=r'^chpk_2_[0-9]*$'))
        dp.add_handler(CallbackQueryHandler(
            callback=self._change_product_3,
            pattern=r'^chpk_3_[0-9]*$'))
        dp.add_handler(CallbackQueryHandler(
            callback=self._change_product_4,
            pattern=r'^chpk_4_[0-9]*$'))
        dp.add_handler(CallbackQueryHandler(
            callback=self._change_product_5,
            pattern=r'^chpk_5_[0-9]*$'))
        dp.add_handler(CallbackQueryHandler(
            callback=self._change_product_6,
            pattern=r'^chpk_6_[0-9]*$'))

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        dp.add_handler(CallbackQueryHandler(
            callback=self._delete_product,
            pattern=r'^delete_product_[0-9]*$'))


    @save_query
    def _order(self, update, context) -> None:
        """–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É
        """
        user = Profile.objects.get(telegram_id=update.message.chat.id)
        user = User.objects.get(id=user.id)

        order_count = OrderModel.objects.filter(user=user).filter(status=0).count()

        if order_count == 0:
            # –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤
            message = '–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞—è–≤–∫—É. –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å –ø–æ–º–æ—â—å—é –ø–æ–∏—Å–∫–∞: /search –ò–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏.'
            
            update.message.reply_text(message,
                reply_markup=ReplyKeyboardMarkup(menu_kb()))
        else:
            # –¢–æ–≤–∞—Ä—ã –µ—Å—Ç—å, –≤—ã–≤–æ–¥–∏–º –∏—Ö:
            order = OrderModel.objects.filter(user=user).filter(status=0)
            message = '*–í–∞—à–∞ –∑–∞—è–≤–∫–∞*'
            message += f'\n–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {order_count}'
            update.message.reply_text(
                message,
                parse_mode=ParseMode.MARKDOWN)

            for item in order:
                message = f'\n\nüì¶ <b>{item.product.title}</b>'
                message += f'\n–¶–µ–Ω–∞: {item.product.price} ‚Ç∏ –∑–∞ {item.product.unit.short}'
                message += f'\n–û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞: {int(item.product_count)} {item.product.unit.short}'
                #message += f'\n–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞: /change_product_count_{item.id}'
                message += f'\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–∏—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å):'
                keyboard = [
                    [
                        InlineKeyboardButton('+1', callback_data=f'chpk_1_{item.id}'),
                        InlineKeyboardButton('+10', callback_data=f'chpk_2_{item.id}'),
                        InlineKeyboardButton('+100', callback_data=f'chpk_3_{item.id}')
                    ],
                    [
                        InlineKeyboardButton('-1', callback_data=f'chpk_4_{item.id}'),
                        InlineKeyboardButton('-10', callback_data=f'chpk_5_{item.id}'),
                        InlineKeyboardButton('-100', callback_data=f'chpk_6_{item.id}')
                    ],
                    [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_product_{item.id}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                update.message.reply_text(
                    message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup)

            reply_keyboard = menu_kb()
            message = '–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ!'
            update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(reply_keyboard))

    @save_query
    def _execute_order(self, update, context) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        """
        user = Profile.objects.get(telegram_id=update.message.chat.id)
        user = User.objects.get(id=user.id)
        order_count = OrderModel.objects.filter(user=user).filter(status=0).count()

        if order_count > 0:
            # –ó–∞—è–≤–∫–∞ –Ω–µ –ø—É—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –ø—Ä–æ–¥–∞–≤—Ü—É (–∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞–º)
            OrderModel.objects.filter(user=user).filter(status=0).update(status=1)

            # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞—è–≤–∫–µ:
            message = '–ó–∞—è–≤–∫–∞ —É–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.'
            message += '\n\n–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:'
            total_sum = 0
            for item in OrderModel.objects.filter(user=user).filter(status=1):
                message += f'\nüì¶ *{item.product.title}*'
                message += f'\n–¶–µ–Ω–∞: {item.product.price} ‚Ç∏'
                message += f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.product_count} –∑–∞ {item.product.unit.short}'
                product_sum = round(item.product.price * item.product_count, 2)
                total_sum += product_sum
                message += f'\n–°—É–º–º–∞: {product_sum} ‚Ç∏'
                message += f'\n\n'
            message += '----'
            message += f'\n*–û–±—â–∞—è —Å—É–º–º–∞: {total_sum} ‚Ç∏*'
            update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(menu_kb()),
                parse_mode=ParseMode.MARKDOWN)
        else:
            update.message.reply_text('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.',
                reply_markup=ReplyKeyboardMarkup(menu_kb()))

    @save_query
    def _delete_order(self, update, context) -> None:
        """–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
        """
        user = Profile.objects.get(telegram_id=update.message.chat.id)
        user = User.objects.get(id=user.id)
        order_count = OrderModel.objects.filter(user=user).filter(status=0).count()

        if order_count > 0:
            # –£–¥–∞–ª—è–µ–º
            OrderModel.objects.filter(user=user).filter(status=0).update(status=5)
            update.message.reply_text(
                '–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.',
                reply_markup=ReplyKeyboardMarkup(menu_kb()))
        else:
            update.message.reply_text('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.',
                reply_markup=ReplyKeyboardMarkup(menu_kb()))

    @save_query
    def _order_list(self, update, context) -> None:
        """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
        """
        user = Profile.objects.get(telegram_id=update.message.chat.id)
        user = User.objects.get(id=user.id)
        order_count_1 = OrderModel.objects.filter(user=user).filter(status=1).count()
        order_count_2 = OrderModel.objects.filter(user=user).filter(status=2).count()
        order_count_3 = OrderModel.objects.filter(user=user).filter(status=3).count()
        message = '*–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫*'
        message += (
            f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞: {order_count_1}'
            f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–∏–Ω—è—Ç—ã—Ö –≤ —Ä–∞–±–æ—Ç—É: {order_count_2}'
            f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–æ—Å—Ç–∞–≤–∫–∏: {order_count_3}')


        update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(menu_kb()))

    def _delete_product(self, update, context) -> None:
        """–£–¥–∞–ª–∏—Ç—å: delete_product_{item.id}
        """
        query = update.callback_query
        order_id = int(query.data.split('_')[-1])
        order = OrderModel.objects.get(id=order_id)
        order.status = 5
        order.save()
        query.edit_message_text('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω')

    def _change_product_1(self, update, context) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 1

        chpk_1_{item.id}
        """
        query = update.callback_query
        order_id = int(query.data.split('_')[-1])
        order = OrderModel.objects.get(id=order_id)
        order.product_count = order.product_count + 1
        order.save()

        message = f'\n\nüì¶ <b>{order.product.title}</b>'
        message += f'\n–¶–µ–Ω–∞: {order.product.price} ‚Ç∏ –∑–∞ {order.product.unit.short}'
        message += f'\n–û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞: <b>{int(order.product_count)}</b> {order.product.unit.short}'
        message += f'\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–∏—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å):'
        keyboard = [
            [
                InlineKeyboardButton('+1', callback_data=f'chpk_1_{order.id}'),
                InlineKeyboardButton('+10', callback_data=f'chpk_2_{order.id}'),
                InlineKeyboardButton('+100', callback_data=f'chpk_3_{order.id}')
            ],
            [
                InlineKeyboardButton('-1', callback_data=f'chpk_4_{order.id}'),
                InlineKeyboardButton('-10', callback_data=f'chpk_5_{order.id}'),
                InlineKeyboardButton('-100', callback_data=f'chpk_6_{order.id}')
            ],
            [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_product_{order.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup)
    
    def _change_product_2(self, update, context) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 10

        chpk_1_{item.id}
        """
        query = update.callback_query
        order_id = int(query.data.split('_')[-1])
        order = OrderModel.objects.get(id=order_id)
        order.product_count = order.product_count + 10
        order.save()

        message = f'\n\nüì¶ <b>{order.product.title}</b>'
        message += f'\n–¶–µ–Ω–∞: {order.product.price} ‚Ç∏ –∑–∞ {order.product.unit.short}'
        message += f'\n–û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞: <b>{int(order.product_count)}</b> {order.product.unit.short}'
        message += f'\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–∏—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å):'
        keyboard = [
            [
                InlineKeyboardButton('+1', callback_data=f'chpk_1_{order.id}'),
                InlineKeyboardButton('+10', callback_data=f'chpk_2_{order.id}'),
                InlineKeyboardButton('+100', callback_data=f'chpk_3_{order.id}')
            ],
            [
                InlineKeyboardButton('-1', callback_data=f'chpk_4_{order.id}'),
                InlineKeyboardButton('-10', callback_data=f'chpk_5_{order.id}'),
                InlineKeyboardButton('-100', callback_data=f'chpk_6_{order.id}')
            ],
            [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_product_{order.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup)

    def _change_product_3(self, update, context) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 100

        chpk_1_{item.id}
        """
        query = update.callback_query
        order_id = int(query.data.split('_')[-1])
        order = OrderModel.objects.get(id=order_id)
        order.product_count = order.product_count + 100
        order.save()

        message = f'\n\nüì¶ <b>{order.product.title}</b>'
        message += f'\n–¶–µ–Ω–∞: {order.product.price} ‚Ç∏ –∑–∞ {order.product.unit.short}'
        message += f'\n–û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞: <b>{int(order.product_count)}</b> {order.product.unit.short}'
        message += f'\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–∏—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å):'
        keyboard = [
            [
                InlineKeyboardButton('+1', callback_data=f'chpk_1_{order.id}'),
                InlineKeyboardButton('+10', callback_data=f'chpk_2_{order.id}'),
                InlineKeyboardButton('+100', callback_data=f'chpk_3_{order.id}')
            ],
            [
                InlineKeyboardButton('-1', callback_data=f'chpk_4_{order.id}'),
                InlineKeyboardButton('-10', callback_data=f'chpk_5_{order.id}'),
                InlineKeyboardButton('-100', callback_data=f'chpk_6_{order.id}')
            ],
            [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_product_{order.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup)

    def _change_product_4(self, update, context) -> None:
        """–£–º–µ–Ω—å—à–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 1

        chpk_1_{item.id}
        """
        query = update.callback_query
        order_id = int(query.data.split('_')[-1])
        order = OrderModel.objects.get(id=order_id)
        order.product_count = order.product_count - 1
        if order.product_count < 0:
            order.product_count = 0
        order.save()

        message = f'\n\nüì¶ <b>{order.product.title}</b>'
        message += f'\n–¶–µ–Ω–∞: {order.product.price} ‚Ç∏ –∑–∞ {order.product.unit.short}'
        message += f'\n–û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞: <b>{int(order.product_count)}</b> {order.product.unit.short}'
        message += f'\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–∏—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å):'
        keyboard = [
            [
                InlineKeyboardButton('+1', callback_data=f'chpk_1_{order.id}'),
                InlineKeyboardButton('+10', callback_data=f'chpk_2_{order.id}'),
                InlineKeyboardButton('+100', callback_data=f'chpk_3_{order.id}')
            ],
            [
                InlineKeyboardButton('-1', callback_data=f'chpk_4_{order.id}'),
                InlineKeyboardButton('-10', callback_data=f'chpk_5_{order.id}'),
                InlineKeyboardButton('-100', callback_data=f'chpk_6_{order.id}')
            ],
            [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_product_{order.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup)

    def _change_product_5(self, update, context) -> None:
        """–£–º–µ–Ω—å—à–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 1

        chpk_1_{item.id}
        """
        query = update.callback_query
        order_id = int(query.data.split('_')[-1])
        order = OrderModel.objects.get(id=order_id)
        order.product_count = order.product_count - 10
        if order.product_count < 0:
            order.product_count = 0
        order.save()

        message = f'\n\nüì¶ <b>{order.product.title}</b>'
        message += f'\n–¶–µ–Ω–∞: {order.product.price} ‚Ç∏ –∑–∞ {order.product.unit.short}'
        message += f'\n–û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞: <b>{int(order.product_count)}</b> {order.product.unit.short}'
        message += f'\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–∏—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å):'
        keyboard = [
            [
                InlineKeyboardButton('+1', callback_data=f'chpk_1_{order.id}'),
                InlineKeyboardButton('+10', callback_data=f'chpk_2_{order.id}'),
                InlineKeyboardButton('+100', callback_data=f'chpk_3_{order.id}')
            ],
            [
                InlineKeyboardButton('-1', callback_data=f'chpk_4_{order.id}'),
                InlineKeyboardButton('-10', callback_data=f'chpk_5_{order.id}'),
                InlineKeyboardButton('-100', callback_data=f'chpk_6_{order.id}')
            ],
            [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_product_{order.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup)

    def _change_product_6(self, update, context) -> None:
        """–£–º–µ–Ω—å—à–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 100

        chpk_1_{item.id}
        """
        query = update.callback_query
        order_id = int(query.data.split('_')[-1])
        order = OrderModel.objects.get(id=order_id)
        order.product_count = order.product_count - 100
        if order.product_count < 0:
            order.product_count = 0
        order.save()

        message = f'\n\nüì¶ <b>{order.product.title}</b>'
        message += f'\n–¶–µ–Ω–∞: {order.product.price} ‚Ç∏ –∑–∞ {order.product.unit.short}'
        message += f'\n–û–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞: <b>{int(order.product_count)}</b> {order.product.unit.short}'
        message += f'\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–∏—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å):'
        keyboard = [
            [
                InlineKeyboardButton('+1', callback_data=f'chpk_1_{order.id}'),
                InlineKeyboardButton('+10', callback_data=f'chpk_2_{order.id}'),
                InlineKeyboardButton('+100', callback_data=f'chpk_3_{order.id}')
            ],
            [
                InlineKeyboardButton('-1', callback_data=f'chpk_4_{order.id}'),
                InlineKeyboardButton('-10', callback_data=f'chpk_5_{order.id}'),
                InlineKeyboardButton('-100', callback_data=f'chpk_6_{order.id}')
            ],
            [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_product_{order.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            message,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup)