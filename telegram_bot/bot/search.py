from telegram import ParseMode
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters

from django.contrib.auth.models import User

from webpanel.models.product import Product
from webpanel.models.order import Order
from webpanel.models.profile import Profile

class Search(object):
    """–ü–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    """
    def __init__(self, updater: Updater) -> None:
        self.updater = updater
        dp = updater.dispatcher

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        dp.add_handler(CommandHandler('search', self._search))
        dp.add_handler(MessageHandler(
            Filters.regex('/product[0-9]*$'),
            self._add_to_order))

        # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–∞
        dp.add_handler(MessageHandler(Filters.all, self._results))


    def _search(self, update, context) -> None:
        """–ü–æ–∏—Å–∫
        """
        update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏ –º—ã –≤—ã–≤–µ–¥–µ–º –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞.')

    def _results(self, update, context) -> None:
        """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        """
        search_query = update.message.text
        # –í PostgreSQL –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        # https://docs.djangoproject.com/en/3.0/topics/db/search/
        search_result = Product.objects.filter(title__icontains=search_query).filter(is_active=1)

        if len(search_result) == 0:
            message = '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
        else:
            result_count = len(search_result)
            message = '*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*'
            message += f'\n–ù–∞–π–¥–µ–Ω–æ {result_count} —Ç–æ–≤–∞—Ä–æ–≤'
            message += '\n–¢–æ–≤–∞—Ä—ã:'

            for item in search_result:
                message += f'\n\nüì¶ *{item.title}*'
                message += f'\n–¶–µ–Ω–∞: {item.price} ‚Ç∏ –∑–∞ {item.unit.short}'
                message += f'\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑: /product{item.id}'

        update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN)

    def _add_to_order(self, update, context) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑
        """
        product_id = int(update.message.text.split('t')[-1])
        product = Product.objects.get(id=product_id)
        user = Profile.objects.get(telegram_id=update.message.chat.id)
        user = User.objects.get(id=user.id)

        if product.is_active == True:
            # –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –Ω–∞–∂–∏–º–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
            check_count = Order.objects.filter(product=product
                                ).filter(user=user
                                ).filter(status=0
                                ).count()

            if check_count == 0:
                # –Ω–æ–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞
                order = Order(product=product, user=user)
                order.status = 0
                order.save()

            message = '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É:'
            message += (
                f'\n–ù–∞–∑–≤–∞–Ω–∏–µ: *{product.title}*'
                f'\n–¶–µ–Ω–∞: *{product.price}* ‚Ç∏'
                f'\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: /order')
        else:
            message = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–æ–π —Ç–æ–≤–∞—Ä–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.'

        update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN)